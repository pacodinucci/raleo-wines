// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  products      Product[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Product {
  id           String      @id @default(uuid())
  title        String      @unique
  winery       String
  category     String
  type         String
  size         String
  weight       String
  harvest      String
  fermentation String
  aging        String
  notes        String
  composition  String
  cellar       String
  alcohol      String
  ph           String
  src          String
  available    Boolean     @default(true)
  boxSize      String      @default("6")
  discount     String
  price        String
  // external_reference String
  stock        Int         @default(0)
  year         String
  // userId             String // Campo de clave foránea para la relación con User
  // user               User    @relation(fields: [userId], references: [id])
  orderItems   OrderItem[]
  // shipnowVariantId   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Order {
  id              String      @id @default(uuid())
  isPaid          Boolean     @default(false)
  isdelivered     Boolean     @default(false)
  orderItems      OrderItem[]
  paymentMethod   String
  phone           String      @default("")
  email           String      @default("")
  address         String      @default("")
  name            String      @default("")
  billingDetails  Json
  shippingDetails Json
  cart            Json
  deliveryDays    String[]
  deliveryTime    String[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
