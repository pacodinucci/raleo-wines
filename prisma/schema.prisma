// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  products      Product[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Product {
  id                 String      @id @default(uuid())
  title              String      @unique
  winery             String
  category           String
  type               String
  size               String
  weight             String
  harvest            String
  fermentation       String
  aging              String
  notes              String
  composition        String
  cellar             String
  alcohol            String
  ph                 String
  src                String
  available          Boolean     @default(true)
  boxSize            String      @default("6")
  discount           String
  price              String
  external_reference String
  stock              Int         @default(0)
  year               String
  orderItems         OrderItem[]
  shipnowVariantId   Int?

  boxes Box[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Order {
  id              String      @id @default(uuid())
  isPaid          Boolean     @default(false)
  isdelivered     Boolean     @default(false)
  orderItems      OrderItem[]
  paymentMethod   String
  phone           String      @default("")
  email           String      @default("")
  address         String      @default("")
  name            String      @default("")
  billingDetails  Json
  shippingDetails Json
  cart            Json
  deliveryDays    String[]
  deliveryTime    String[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  Customer        Customer?   @relation(fields: [customerId], references: [id])
  customerId      String?
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Customer {
  id      String  @id @default(uuid())
  phone   String  @default("")
  email   String  @default("")
  address String  @default("")
  name    String  @default("")
  orders  Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id            String  @id @default(uuid())
  email         String
  name          String
  address       String
  region        String
  city          String
  zipCode       String
  phone         String
  plan          String
  isActive      Boolean
  mercadopagoId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Packingbill {
  id                String  @id @default(uuid())
  packingbillNumber String  @unique
  products          Json // Almacena un array de objetos con productId y stock
  company           String
  observations      String?
  // bill              Bill?
  bill              Bill?   @relation(fields: [billId], references: [id]) // Packingbill ahora referencia a Bill
  billId            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bill {
  id           String        @id @default(uuid())
  billNumber   String        @unique
  products     Json
  subtotal     Int
  iva          Int
  total        Int
  observations String
  company      String
  // packingbill       Packingbill @relation(fields: [packingbillNumber], references: [packingbillNumber])
  // packingbillNumber String      @unique
  packingbills Packingbill[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BoxType {
  CLUB
  COMBO
  CLOSED
}

model Box {
  id                 String    @id @default(uuid())
  name               String
  bottles            Int
  type               BoxType
  products           Product[]
  isActive           Boolean
  price              Int?
  src                String?
  clubType           String?
  description        String?
  shortDescription   String?
  external_reference String?
  shipnowVariantId   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
